// <auto-generated />
using System;
using Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251028061954_firstMig")]
    partial class firstMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<long>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DoctorId"));

                    b.Property<string>("Biography")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctor", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorId = 1L,
                            Biography = "Especialista en cardiología con 10 años de experiencia.",
                            FirstName = "Juan",
                            LastName = "Pérez",
                            LicenseNumber = "ABC123"
                        },
                        new
                        {
                            DoctorId = 2L,
                            Biography = "Dermatóloga dedicada al cuidado de la piel.",
                            FirstName = "María",
                            LastName = "Gómez",
                            LicenseNumber = "DEF456"
                        },
                        new
                        {
                            DoctorId = 3L,
                            Biography = "Pediatra comprometido con la salud infantil.",
                            FirstName = "Carlos",
                            LastName = "López",
                            LicenseNumber = "GHI789"
                        },
                        new
                        {
                            DoctorId = 4L,
                            Biography = "Ginecóloga especializada en salud femenina.",
                            FirstName = "Ana",
                            LastName = "Martínez",
                            LicenseNumber = "JKL012"
                        },
                        new
                        {
                            DoctorId = 5L,
                            Biography = "Ortopedista con amplia experiencia en lesiones deportivas.",
                            FirstName = "Luis",
                            LastName = "Rodríguez",
                            LicenseNumber = "MNO345"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialty", b =>
                {
                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialtyId")
                        .HasColumnType("bigint");

                    b.HasKey("DoctorId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialty", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorId = 1L,
                            SpecialtyId = 1L
                        },
                        new
                        {
                            DoctorId = 2L,
                            SpecialtyId = 2L
                        },
                        new
                        {
                            DoctorId = 3L,
                            SpecialtyId = 3L
                        },
                        new
                        {
                            DoctorId = 4L,
                            SpecialtyId = 4L
                        },
                        new
                        {
                            DoctorId = 5L,
                            SpecialtyId = 5L
                        },
                        new
                        {
                            DoctorId = 1L,
                            SpecialtyId = 3L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<long>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PatientId"));

                    b.Property<string>("Adress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("HealthPlan")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MembershipNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PatientId");

                    b.ToTable("Patient", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = 1L,
                            Adress = "Calle Falsa 123",
                            DateOfBirth = new DateOnly(1985, 5, 20),
                            Dni = 12345678,
                            HealthPlan = "Plan A",
                            LastName = "García",
                            MembershipNumber = "A12345",
                            Name = "Pedro"
                        },
                        new
                        {
                            PatientId = 2L,
                            Adress = "Avenida Siempre Viva 742",
                            DateOfBirth = new DateOnly(1990, 8, 15),
                            Dni = 87654321,
                            HealthPlan = "Plan B",
                            LastName = "López",
                            MembershipNumber = "B67890",
                            Name = "María"
                        },
                        new
                        {
                            PatientId = 3L,
                            Adress = "Boulevard Central 456",
                            DateOfBirth = new DateOnly(1978, 12, 5),
                            Dni = 11223344,
                            HealthPlan = "Plan C",
                            LastName = "Martínez",
                            MembershipNumber = "C11223",
                            Name = "Juan"
                        },
                        new
                        {
                            PatientId = 4L,
                            Adress = "Calle del Sol 789",
                            DateOfBirth = new DateOnly(2000, 3, 30),
                            Dni = 44332211,
                            HealthPlan = "Plan A",
                            LastName = "Sánchez",
                            MembershipNumber = "A44556",
                            Name = "Ana"
                        },
                        new
                        {
                            PatientId = 5L,
                            Adress = "Avenida de la Luna 321",
                            DateOfBirth = new DateOnly(1995, 7, 10),
                            Dni = 55667788,
                            HealthPlan = "Plan B",
                            LastName = "Fernández",
                            MembershipNumber = "B77889",
                            Name = "Luis"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Specialty", b =>
                {
                    b.Property<long>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SpecialtyId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpecialtyId");

                    b.ToTable("Specialty", (string)null);

                    b.HasData(
                        new
                        {
                            SpecialtyId = 1L,
                            Description = "Especialista enfocado en la salud cardiovascuilar.",
                            Name = "Cardiology"
                        },
                        new
                        {
                            SpecialtyId = 2L,
                            Description = "Especialista en el cuidado de la piel.",
                            Name = "Dermatology"
                        },
                        new
                        {
                            SpecialtyId = 3L,
                            Description = "Especialista en la salud infantil.",
                            Name = "Pediatrics"
                        },
                        new
                        {
                            SpecialtyId = 4L,
                            Description = "Especialista en la salud femenina.",
                            Name = "Gynecology"
                        },
                        new
                        {
                            SpecialtyId = 5L,
                            Description = "Especialista en el sistema musculoesquelético.",
                            Name = "Orthopedics"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialty", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Specialty", "Specialty")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("DoctorSpecialties");
                });

            modelBuilder.Entity("Domain.Entities.Specialty", b =>
                {
                    b.Navigation("DoctorSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
