// <auto-generated />
using System;
using Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251022180159_DataMigration")]
    partial class DataMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctor", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            LicenseNumber = "ABC123",
                            Specialty = "Cardiology",
                            UserId = 4
                        },
                        new
                        {
                            DoctorId = 2,
                            LicenseNumber = "DEF456",
                            Specialty = "Dermatology",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Adress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("HealthPlan")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MembershipNumber")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patient", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Adress = "Calle Falsa 123",
                            DateOfBirth = new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dni = 12345678,
                            HealthPlan = "Plan A",
                            MembershipNumber = 1001,
                            UserId = 1
                        },
                        new
                        {
                            PatientId = 2,
                            Adress = "Av. Siempre Viva 456",
                            DateOfBirth = new DateTime(1985, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dni = 87654321,
                            HealthPlan = "Plan B",
                            MembershipNumber = 1002,
                            UserId = 2
                        },
                        new
                        {
                            PatientId = 3,
                            Adress = "Calle Luna 789",
                            DateOfBirth = new DateTime(2000, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dni = 11223344,
                            HealthPlan = "Plan C",
                            MembershipNumber = 1003,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.Property<int>("UserRol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Mariano.paciente@test.com",
                            Name = "Mariano Perez",
                            Password = "1234",
                            Rol = 1,
                            UserRol = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "maria.paciente@test.com",
                            Name = "Maria Lopez",
                            Password = "1234",
                            Rol = 1,
                            UserRol = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "carlos.paciente@test.com",
                            Name = "Carlos Ruiz",
                            Password = "1234",
                            Rol = 1,
                            UserRol = 0
                        },
                        new
                        {
                            Id = 4,
                            Email = "ana.medico@test.com",
                            Name = "Dr. Ana Gomez",
                            Password = "1234",
                            Rol = 2,
                            UserRol = 0
                        },
                        new
                        {
                            Id = 5,
                            Email = "juan.medico@test.com",
                            Name = "Dr. Juan Martinez",
                            Password = "1234",
                            Rol = 2,
                            UserRol = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.User", "UserNavigation")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "UserNavigation")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
